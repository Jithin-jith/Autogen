# Import required modules
import os                                                 # For interacting with environment variables
from autogen import ConversableAgent, GroupChat, GroupChatManager  # AutoGen classes for multi-agent conversations
from dotenv import load_dotenv                            # To load environment variables from a .env file

# Load environment variables from the .env file into the environment
load_dotenv()

# Define the LLM model to be used
model = "gpt-4o-mini"

# LLM configuration dictionary
# - model: The chosen LLM model
# - temperature: Controls creativity in output (0 = deterministic, 1 = highly creative)
# - api_key: Securely loaded from environment variables
llm_config = {
    "model": model,
    "temperature": 0.9,
    "api_key": os.environ["OPENAI_API_KEY"],  # Retrieves OpenAI API key from system environment
}

# ------------------------
# Define Individual Agents
# ------------------------

# Flight Agent → Suggests flight options for the trip
flight_agent = ConversableAgent(
    name="Flight_Agent",  # Unique agent name
    system_message="You provide the best flight options for the given destination and dates.",  # Role description
    llm_config=llm_config,
    description="Provides flight options.",  # Human-readable description
)

# Hotel Agent → Suggests hotel options
hotel_agent = ConversableAgent(
    name="Hotel_Agent",
    system_message="You suggest the best hotels for the given destination and dates.",
    llm_config=llm_config,
    description="Suggests hotel options.",
)

# Activity Agent → Recommends activities and attractions
activity_agent = ConversableAgent(
    name="Activity_Agent",
    system_message="You recommend activities and attractions to visit at the destination.",
    llm_config=llm_config,
    description="Recommends activities and attractions.",
)

# Restaurant Agent → Suggests places to eat
restaurant_agent = ConversableAgent(
    name="Restaurant_Agent",
    system_message="You suggest the best restaurants to dine at in the destination.",
    llm_config=llm_config,
    description="Recommends restaurants.",
)

# Weather Agent → Provides weather forecasts
weather_agent = ConversableAgent(
    name="Weather_Agent",
    system_message="You provide the weather forecast for the travel dates.",
    llm_config=llm_config,
    description="Provides weather forecast.",
)

# ------------------------
# Group Chat Setup
# ------------------------

# Create a GroupChat instance to allow multiple agents to talk in the same conversation
group_chat = GroupChat(
    agents=[flight_agent, hotel_agent, activity_agent, restaurant_agent, weather_agent],  # List of agents
    messages=[],       # Starting with no messages
    max_round=6,       # Maximum number of conversation rounds allowed
)

# Create a GroupChatManager to control the conversation flow among agents
group_chat_manager = GroupChatManager(
    groupchat=group_chat,
    llm_config=llm_config,
)

# ------------------------
# Initiate the Conversation
# ------------------------

# Start the conversation by having the Weather_Agent send the first message
# - message: User's travel request
# - summary_method: "reflection_with_llm" means the summary will be generated by the LLM after reflecting on the conversation
chat_result = weather_agent.initiate_chat(
    group_chat_manager,
    message="I'm planning a trip to Paris for the first week of September. Can you help me plan? I will be departuring from Miami",
    summary_method="reflection_with_llm",
)
